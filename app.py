from fastapi import FastAPI
from database.db_connect import create_dbconnec, DB_CONFIG 
from database.table import TABLES
from model.user import User
from model.role import Role
from datetime import date, datetime
from database.sql import SQL

# -----------------------------
app = FastAPI()




### Root

@app.get('/')
async def root():
    now = datetime.now()

    return {'message': 'testing', 'timestamp': now}


### Get users from /users/, with username:str and password:str as required queryparameters
@app.get('/users/')
async def get_user(username: str, password: str):

    # print(username + password)

    db = create_dbconnec(DB_CONFIG=DB_CONFIG)

    sql = SQL(db)
    
    user = sql.get_user(username, password)

    

    sql.close()

    return {"user": user}


### Create a user with arguments(username, password, the role of user, the email of user).
### Created_date will be generated by python datetime module.
@app.post('/create-user')
async def create_user(newuser: User):

    db = create_dbconnec(DB_CONFIG=DB_CONFIG)


    sql = SQL(db)


    sql.create_user(username=newuser.name, password=newuser.password, role= newuser.role, email=newuser.email, created_date=datetime.now())

    sql.close()

    return newuser


### Required to pass a predefined arguments for a Role object defined in python. 
### If no data incorrect, then create a user.
@app.post('/create-role')
async def create_role(newrole: Role):
    
    db = create_dbconnec(DB_CONFIG=DB_CONFIG)

    sql = SQL(db)
    
    sql.create_role(name= newrole.name, description=newrole.description, enable_block= newrole.enable_block, enable_reset_pwd= newrole.enable_reset_pwd, enable_sql= newrole.enable_sql)

    sql.close()


    return newrole

